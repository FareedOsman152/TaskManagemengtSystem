@model TaskManagmentSystem.ViewModels.TaskListsViewModel

@{
    ViewData["Title"] = "Task Board";
}

<div class="task-board-wrapper">
    <div class="container-fluid task-board-container">
        <!-- Header Section -->
        <div class="board-header">
            <div class="header-content">
                <div class="title-section">
                    <h1 class="board-title">@ViewData["Title"]</h1>
                    <p class="board-subtitle">Organize and track your tasks efficiently</p>
                </div>
                <a asp-action="Add" asp-route-id="@Model.WorkSpaceId" class="btn btn-add-list">
                    Add New List
                </a>
            </div>
        </div>

        <!-- Task Lists Container -->
        <div class="lists-container">
            <div class="lists-scroll-wrapper">
                @foreach (var taskList in Model.TaskLists)
                {
                    <div class="task-list-column">
                        <div class="task-list-card">
                            <!-- List Header -->
                            <div class="list-header">
                                <div class="list-title-section">
                                    <h5 class="list-title">@taskList.Title</h5>
                                    <span class="task-count">@(taskList.UserTasks?.Count ?? 0) tasks</span>
                                </div>
                                <div class="list-actions">
                                    <a asp-action="Edit" asp-route-id="@taskList.Id" class="btn-edit">
                                        Edit
                                    </a>
                                    <form asp-action="Delete" method="post" class="d-inline"
                                          onsubmit="return confirm('Delete this task list and all its tasks?');">
                                        <input type="hidden" name="taskListId" value="@taskList.Id" />
                                        <input type="hidden" name="workSpaceId" value="@Model.WorkSpaceId" />
                                        <button type="submit" class="btn-delete">
                                            Delete
                                        </button>
                                    </form>
                                </div>
                            </div>

                            <!-- Tasks Container -->
                            <div class="tasks-container">
                                @if (taskList.UserTasks?.Any() != true)
                                {
                                    <div class="empty-state">
                                        <p>No tasks yet</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="tasks-list">
                                        @foreach (var task in taskList.UserTasks)
                                        {
                                            <div class="task-item @($"task-color-{task.Color.ToString().ToLower()}")">
                                                <!-- Color Bar -->
                                                @if (task.Color != TaskManagmentSystem.Models.UserTaskColor.None)
                                                {
                                                    <div class="task-color-bar task-color-@(task.Color.ToString().ToLower())"></div>
                                                }

                                                <div class="task-content">
                                                    <div class="task-main">
                                                        <div class="task-info">
                                                            <div class="task-title">@task.Title</div>

                                                            <!-- Status and Priority Indicators -->
                                                            <div class="task-badges">
                                                                <!-- Status Badge -->
                                                                <span class="status-badge status-@(task.Status.ToString().ToLower())"
                                                                      title="Status: @task.Status">
                                                                    @switch (task.Status)
                                                                    {
                                                                        case TaskManagmentSystem.Models.UserTaskStatus.NotStarted:
                                                                            <span>Not Started</span>
                                                                            break;
                                                                        case TaskManagmentSystem.Models.UserTaskStatus.InProgress:
                                                                            <span>In Progress</span>
                                                                            break;
                                                                        case TaskManagmentSystem.Models.UserTaskStatus.Completed:
                                                                            <span>Completed</span>
                                                                            break;
                                                                        case TaskManagmentSystem.Models.UserTaskStatus.OnHold:
                                                                            <span>On Hold</span>
                                                                            break;
                                                                    }
                                                                </span>

                                                                <!-- Priority Badge -->
                                                                @if (task.Priority != TaskManagmentSystem.Models.UserTaskPriority.None)
                                                                {
                                                                    <span class="priority-badge priority-@(task.Priority.ToString().ToLower())"
                                                                          title="Priority: @task.Priority">
                                                                        @switch (task.Priority)
                                                                        {
                                                                            case TaskManagmentSystem.Models.UserTaskPriority.Low:
                                                                                <span>Low</span>
                                                                                break;
                                                                            case TaskManagmentSystem.Models.UserTaskPriority.Medium:
                                                                                <span>Medium</span>
                                                                                break;
                                                                            case TaskManagmentSystem.Models.UserTaskPriority.High:
                                                                                <span>High</span>
                                                                                break;
                                                                        }
                                                                    </span>
                                                                }
                                                            </div>

                                                        </div>

                                                        <div class="task-actions">
                                                            <a asp-action="Edit" asp-controller="UserTask"
                                                               asp-route-id="@task.Id"
                                                               asp-route-WorkSpaceId="@Model.WorkSpaceId"
                                                               class="task-btn-edit">
                                                            </a>
                                                            <form asp-action="Delete" asp-controller="UserTask" method="post" class="d-inline"
                                                                  onsubmit="return confirm('Are you sure you want to delete this task?');">
                                                                <input type="hidden" name="Id" value="@task.Id" />
                                                                <input type="hidden" name="workSpaceId" value="@Model.WorkSpaceId" />
                                                                <button type="submit" class="task-btn-delete"></button>
                                                            </form>
                                                        </div>
                                                    </div>

                                                    <!-- Task Dates -->
                                                    <div class="task-indicators">
                                                        @if (task.BeginOn.HasValue)
                                                        {
                                                            <span class="task-date" title="Start: @task.BeginOn.Value.ToString("MMM dd, yyyy")">
                                                                @task.BeginOn.Value.ToString("MM/dd")
                                                            </span>
                                                        }

                                                        @if (task.EndOn.HasValue)
                                                        {
                                                            <span class="task-date end-date" title="Due: @task.EndOn.Value.ToString("MMM dd, yyyy")">
                                                                @task.EndOn.Value.ToString("MM/dd")
                                                            </span>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <!-- Add Task Form -->
                            <div class="add-task-section">
                                <form method="post" asp-action="Add" asp-controller="UserTask">
                                    <input type="hidden" name="taskListId" value="@taskList.Id" />
                                    <input type="hidden" name="workSpaceId" value="@Model.WorkSpaceId" />
                                    <button type="submit" class="btn-add-task">
                                        Add a task
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    /* Root Variables */
    :root {
        --primary-color: #6366f1;
        --primary-light: #e0e7ff;
        --danger-color: #ef4444;
        --warning-color: #f59e0b;
        --success-color: #10b981;
        --text-color: #1f2937;
        --text-light: #6b7280;
        --border-color: #e5e7eb;
        --bg-color: #6366f1;
        /* Task Colors */
        --task-red: #ef4444;
        --task-blue: #3b82f6;
        --task-green: #10b981;
        --task-yellow: #f59e0b;
        --task-gray: #6b7280;
        /* Status Colors */
        --status-notstarted: #6b7280;
        --status-inprogress: #3b82f6;
        --status-completed: #10b981;
        --status-onhold: #f59e0b;
        /* Priority Colors */
        --priority-low: #10b981;
        --priority-medium: #f59e0b;
        --priority-high: #ef4444;
    }

    /* Main Container */
    .task-board-wrapper {
        background-color: var(--bg-color);
        min-height: 100vh;
        padding: 1.5rem;
    }

    .task-board-container {
        max-width: 100%;
    }

    /* Header Styles */
    .board-header {
        background-color: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .board-title {
        font-size: 2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
    }

    .board-subtitle {
        color: var(--text-light);
        margin: 0.5rem 0 0 0;
    }

    .btn-add-list {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        text-decoration: none;
    }

    /* Lists Container */
    .lists-container {
        overflow-x: auto;
    }

    .lists-scroll-wrapper {
        display: flex;
        gap: 1rem;
        padding: 0.5rem;
    }

    .task-list-column {
        min-width: 320px;
        width: 320px;
    }

    /* Task List Card */
    .task-list-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        height: fit-content;
    }

    /* List Header */
    .list-header {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .list-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-color);
        margin: 0;
    }

    .task-count {
        font-size: 0.875rem;
        color: var(--text-light);
        margin-top: 0.25rem;
        display: block;
    }

    .list-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-edit, .btn-delete {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.875rem;
        cursor: pointer;
        text-decoration: none;
    }

    .btn-edit {
        background-color: white;
        color: var(--warning-color);
        border: 1px solid var(--warning-color);
    }

    .btn-delete {
        background-color: white;
        color: var(--danger-color);
        border: 1px solid var(--danger-color);
    }

    /* Tasks Container */
    .tasks-container {
        padding: 1rem;
        min-height: 100px;
    }

    .tasks-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    /* Enhanced Task Item */
    .task-item {
        border-radius: 6px;
        border: 1px solid var(--border-color);
        background-color: white;
        position: relative;
        overflow: hidden;
    }

    /* Color Bar on the Left */
    .task-color-bar {
        position: absolute;
        left: 0;
        top: 0;
        width: 4px;
        height: 100%;
    }

        .task-color-bar.task-color-red {
            background-color: var(--task-red);
        }

        .task-color-bar.task-color-blue {
            background-color: var(--task-blue);
        }

        .task-color-bar.task-color-green {
            background-color: var(--task-green);
        }

        .task-color-bar.task-color-yellow {
            background-color: var(--task-yellow);
        }

        .task-color-bar.task-color-gray {
            background-color: var(--task-gray);
        }

    .task-content {
        padding: 0.75rem;
        padding-left: 1rem;
    }

    .task-main {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .task-info {
        flex: 1;
    }

    .task-title {
        font-size: 0.95rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 0.5rem;
    }

    /* Status and Priority Badges */
    .task-badges {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .status-badge,
    .priority-badge {
        font-size: 0.7rem;
        font-weight: 500;
        padding: 0.2rem 0.5rem;
        border-radius: 12px;
        white-space: nowrap;
    }

    /* Status Badge Styles */
    .status-notstarted {
        background-color: rgba(107, 114, 128, 0.15);
        color: var(--status-notstarted);
    }

    .status-inprogress {
        background-color: rgba(59, 130, 246, 0.15);
        color: var(--status-inprogress);
    }

    .status-completed {
        background-color: rgba(16, 185, 129, 0.15);
        color: var(--status-completed);
    }

    .status-onhold {
        background-color: rgba(245, 158, 11, 0.15);
        color: var(--status-onhold);
    }

    /* Priority Badge Styles */
    .priority-low {
        background-color: rgba(16, 185, 129, 0.15);
        color: var(--priority-low);
    }

    .priority-medium {
        background-color: rgba(245, 158, 11, 0.15);
        color: var(--priority-medium);
    }

    .priority-high {
        background-color: rgba(239, 68, 68, 0.15);
        color: var(--priority-high);
    }

    .task-actions {
        display: flex;
        gap: 0.25rem;
        flex-shrink: 0;
    }

    .task-btn-edit, .task-btn-delete {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .task-btn-edit {
        background-color: var(--warning-color);
        position: relative;
    }

        .task-btn-edit::before {
            content: "";
            position: absolute;
            top: 5px;
            left: 5px;
            width: 10px;
            height: 10px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='white'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z'%3E%3C/path%3E%3C/svg%3E");
            background-size: cover;
        }

    .task-btn-delete {
        background-color: var(--danger-color);
        position: relative;
    }

        .task-btn-delete::before {
            content: "";
            position: absolute;
            top: 5px;
            left: 5px;
            width: 10px;
            height: 10px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='white'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16'%3E%3C/path%3E%3C/svg%3E");
            background-size: cover;
        }

    /* Task Indicators */
    .task-indicators {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.5rem;
        flex-wrap: wrap;
    }

    .task-date {
        font-size: 0.75rem;
        color: var(--text-light);
        background-color: rgba(0, 0, 0, 0.05);
        padding: 0.125rem 0.375rem;
        border-radius: 4px;
    }

    .end-date {
        color: var(--danger-color);
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 1rem;
        color: var(--text-light);
    }

    /* Add Task Section */
    .add-task-section {
        padding: 1rem;
        border-top: 1px solid var(--border-color);
    }

    .btn-add-task {
        width: 100%;
        background-color: white;
        border: 1px solid var(--primary-color);
        color: var(--primary-color);
        padding: 0.5rem;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
    }
</style>